# https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/ca.conf

# reqコマンドで参照
[req]
distinguished_name = req_distinguished_name # 本来はここが対話だがprompt=noで対話を無効化
prompt             = no
x509_extensions    = ca_x509_extensions # 自己署名の証明書作成(ルートCAなのでOK)

[ca_x509_extensions]
# basicConstraints=critical,CA:TRUEとするとより厳密な挙動になる
basicConstraints = CA:TRUE # CA証明書の場合に必要
keyUsage         = cRLSign, keyCertSign
# cRLSign: 証明書失効リスト(CRL)への署名が可能
# keyCertSign: 他の証明書への署名が可能

# keyUsageの設定例
# e.g.
#   クライアント証明書用
#   keyUsage = nonRepudiation, digitalSignature, keyEncipherment
#   証明書署名要求用
#   keyUsage = nonRepudiation, digitalSignature, keyEncipherment
#   CA証明書用
#   keyUsage = cRLSign, keyCertSign

[req_distinguished_name]
C   = US
ST  = Washington
L   = Seattle
CN  = CA # Common Name

[admin]
distinguished_name = admin_distinguished_name
prompt             = no
req_extensions     = default_req_extensions

[admin_distinguished_name]
CN = admin
O  = system:masters

# Service Accounts
#
# The Kubernetes Controller Manager leverages a key pair to generate
# and sign service account tokens as described in the
# [managing service accounts](https://kubernetes.io/docs/admin/service-accounts-admin/)
# documentation.

[service-accounts]
distinguished_name = service-accounts_distinguished_name
prompt             = no
req_extensions     = default_req_extensions

[service-accounts_distinguished_name]
CN = service-accounts

# Worker Nodes
#
# Kubernetes uses a [special-purpose authorization mode](https://kubernetes.io/docs/admin/authorization/node/)
# called Node Authorizer, that specifically authorizes API requests made
# by [Kubelets](https://kubernetes.io/docs/concepts/overview/components/#kubelet).
# In order to be authorized by the Node Authorizer, Kubelets must use a credential
# that identifies them as being in the `system:nodes` group, with a username
# of `system:node:<nodeName>`.

[node-0]
distinguished_name = node-0_distinguished_name
prompt             = no
req_extensions     = node-0_req_extensions

[node-0_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUsage     = clientAuth, serverAuth
keyUsage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Node-0 Certificate"
subjectAltName       = DNS:node-0, IP:127.0.0.1
subjectKeyIdentifier = hash

[node-0_distinguished_name]
CN = system:node:node-0
O  = system:nodes
C  = US
ST = Washington
L  = Seattle

[node-1]
distinguished_name = node-1_distinguished_name
prompt             = no
req_extensions     = node-1_req_extensions

[node-1_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUsage     = clientAuth, serverAuth
keyUsage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Node-1 Certificate"
subjectAltName       = DNS:node-1, IP:127.0.0.1
subjectKeyIdentifier = hash

[node-1_distinguished_name]
CN = system:node:node-1
O  = system:nodes
C  = US
ST = Washington
L  = Seattle


# Kube Proxy Section
[kube-proxy]
distinguished_name = kube-proxy_distinguished_name
prompt             = no
req_extensions     = kube-proxy_req_extensions

[kube-proxy_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUsage     = clientAuth, serverAuth
keyUsage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Kube Proxy Certificate"
subjectAltName       = DNS:kube-proxy, IP:127.0.0.1
subjectKeyIdentifier = hash

[kube-proxy_distinguished_name]
CN = system:kube-proxy
O  = system:node-proxier
C  = US
ST = Washington
L  = Seattle


# Controller Manager
[kube-controller-manager]
distinguished_name = kube-controller-manager_distinguished_name
prompt             = no
req_extensions     = kube-controller-manager_req_extensions

[kube-controller-manager_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUsage     = clientAuth, serverAuth
keyUsage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Kube Controller Manager Certificate"
subjectAltName       = DNS:kube-proxy, IP:127.0.0.1
subjectKeyIdentifier = hash

[kube-controller-manager_distinguished_name]
CN = system:kube-controller-manager
O  = system:kube-controller-manager
C  = US
ST = Washington
L  = Seattle


# Scheduler
[kube-scheduler]
distinguished_name = kube-scheduler_distinguished_name
prompt             = no
req_extensions     = kube-scheduler_req_extensions

[kube-scheduler_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUsage     = clientAuth, serverAuth
keyUsage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Kube Scheduler Certificate"
subjectAltName       = DNS:kube-scheduler, IP:127.0.0.1
subjectKeyIdentifier = hash

[kube-scheduler_distinguished_name]
CN = system:kube-scheduler
O  = system:system:kube-scheduler
C  = US
ST = Washington
L  = Seattle


# API Server
#
# The Kubernetes API server is automatically assigned the `kubernetes`
# internal dns name, which will be linked to the first IP address (`10.32.0.1`)
# from the address range (`10.32.0.0/24`) reserved for internal cluster
# services.

# ## API Server証明書の役割

# **基本機能**
# - Kubernetes API Serverはクラスターの中心的なコンポーネントで、全てのクラスター操作のエントリーポイントとなります
# - この証明書設定は、API Serverが他のコンポーネントからの安全な通信を確立するために使用されます

# ## 証明書の主要設定

# **セキュリティ制約**
# - `basicConstraints = CA:FALSE`: API Server証明書は認証局として機能しない
# - `extendedKeyUsage`: クライアントとサーバーの両方の認証に対応
# - `keyUsage`: デジタル署名と鍵暗号化機能を有効化

# **代替名(SAN)の設定**
# - 複数のDNS名とIPアドレスを含む包括的なSAN設定:
#   - ループバックアドレス（127.0.0.1）: ローカルアクセス用
#   - クラスターIP（10.32.0.1）: 内部サービス用
#   - 階層的なDNS名: クラスター内での様々なアクセスパターンに対応
#     - `kubernetes`
#     - `kubernetes.default`
#     - `kubernetes.default.svc`
#     - `kubernetes.default.svc.cluster`
#     - `kubernetes.svc.cluster.local`

# ## 設定の重要性

# **アクセシビリティ**
# - 異なるネームスペースやサービスからのアクセスを可能にする多層的なDNS構造
# - クラスター内部とローカルホストからのアクセスに対応するIPアドレス設定
# - クラスター内のサービスディスカバリーをサポート

# **セキュリティ考慮事項**
# - TLS証明書の検証に必要な全てのドメイン名とIPアドレスを明示的に指定
# - クラスター内の安全な通信を保証
# - 証明書の用途を明確に制限し、不正使用を防止

[kube-api-server]
distinguished_name = kube-api-server_distinguished_name
prompt             = no
req_extensions     = kube-api-server_req_extensions

[kube-api-server_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUsage     = clientAuth, serverAuth
keyUsage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Kube Scheduler Certificate"
subjectAltName       = @kube-api-server_alt_names
subjectKeyIdentifier = hash

[kube-api-server_alt_names]
IP.0  = 127.0.0.1
IP.1  = 10.32.0.1
DNS.0 = kubernetes
DNS.1 = kubernetes.default
DNS.2 = kubernetes.default.svc
DNS.3 = kubernetes.default.svc.cluster
DNS.4 = kubernetes.svc.cluster.local
DNS.5 = server.kubernetes.local
DNS.6 = api-server.kubernetes.local

[kube-api-server_distinguished_name]
CN = kubernetes
C  = US
ST = Washington
L  = Seattle


[default_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUsage     = clientAuth # SSL/TLS Webクライアント認証
keyUsage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Admin Client Certificate"
subjectKeyIdentifier = hash